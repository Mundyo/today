package projects.dao;

import provided.util.DaoBase;
import projects.entity.Material;
import projects.entity.Project;
import projects.entity.Step;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale.Category;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Optional;

import projects.Exception.DbException;


@SuppressWarnings("unused")
public class ProjectDao extends DaoBase{
    // Constants for table names
    private static final String CATEGORY_TABLE = "category";
    private static final String MATERIAL_TABLE = "material";
    private static final String PROJECT_TABLE = "project";
    private static final String PROJECT_CATEGORY_TABLE = "project_category";
    private static final String STEP_TABLE = "step";

    

    public Project insertProject(Project project) {
        // @formatter:off
        String sql = "INSERT INTO " + PROJECT_TABLE +
                " (project_name, estimated_hours, actual_hours, difficulty, notes) " +
                "VALUES (?, ?, ?, ?, ?)";
        // @formatter:on
        try (Connection conn = DbConnection.getConnection()) {
            // Start a transaction
            startTransaction(conn);

            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                // Set parameters in the PreparedStatement
                setParameter(stmt, 1, project.getProjectName(), String.class);
                setParameter(stmt, 2, project.getEstimatedHours(), BigDecimal.class);
                setParameter(stmt, 3, project.getActualHours(), BigDecimal.class);
                setParameter(stmt, 4, project.getDifficulty(), Integer.class);
                setParameter(stmt, 5, project.getNotes(), String.class);

              
                stmt.executeUpdate();

                // Obtain the project ID
                Integer projectId = getLastInsertId(conn, PROJECT_TABLE);

                // Commit the transaction
                commitTransaction(conn);

                // Set the projectId on the Project object and return it
                project.setProjectId(projectId);
                return project;
            } catch (Exception e) {
                // Roll back the transaction on any exception
                rollbackTransaction(conn);
                throw new DbException(e);
            }
        } catch (SQLException e) {
            throw new DbException(e);
        }
    }



	



	public List<Project> fetchAllProjects() {
		// TODO Auto-generated method stub
		String sql = "SELECT * FROM " + PROJECT_TABLE + " ORDER BY project_name";
		
		   try(Connection conn = DbConnection.getConnection()){
			   startTransaction(conn);
			   
			   try {
				   Project project = null;
				   
				   try (PreparedStatement stmt = conn.prepareStatement(sql)){
				       setParameter(stmt, 1, projectId, Integer.class);
				       
					   try(ResultSet rs= stmt.executeQuery()){
						   if(rs.next()) {
							   project = extract(rs, Project.class);
						   }
					   } 
					}
				     if(Objects.nonNull(project)){
				    	 Project project = extract(rs, Project.class);
	                        project.getMaterials().addAll(fetchMaterialsForProjects(conn, projectId));
	                        project.getSteps().addAll(fetchStepsForProjects(conn, projectId));
	                        project.getCategories().add((projects.entity.Category) fetchCategoriesForProject(conn, projectId));
	                      }
				     
				           commitTransaction(conn);
				           
				            return Optional.ofNullable(project);
				      }
				        catch(Exception e) {
				        	rollbackTransaction(conn);
				        	  throw new DbException(e);
				     } 
	                }	  
			          catch(SQLException e) {
			        	  throw new DbException(e);
     }
	}














	public Optional<Project>fetchProjectById(Integer projectId) {
		// TODO Auto-generated method stub
		String sql = "SELECT * FROM " + PROJECT_TABLE + " WHERE project_id = ?";
		 Connection conn = null; // Initialize the connection outside the try block
	        try {
	            conn = DbConnection.getConnection();
	            startTransaction(conn);

	            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
	                setParameter(stmt, 1, projectId, Integer.class);

	                try (ResultSet rs = stmt.executeQuery()) {
	                    if (rs.next()) {
	                        Project project = extract(rs, Project.class);
	                        project.getMaterials().addAll(fetchMaterialsForProjects(conn, projectId));
	                        project.getSteps().addAll(fetchStepsForProjects(conn, projectId));
	                        project.getCategories().add((projects.entity.Category) fetchCategoriesForProject(conn, projectId));
	                        commitTransaction(conn);
	                        return Optional.of(project);
	                    }
	                }
	            } catch (SQLException e) {
	                rollbackTransaction(conn);
	                throw new DbException(e);
	            } finally {
	                // Close the connection only if it's not null
	                if (conn != null) {
	                    closeConnection(conn);
	                }
	            }
	        } catch (SQLException e) {
	            throw new DbException(e);
	        }

	        // Project with the given ID does not exist.
	        return Optional.empty();
	    }

	    private void closeConnection(Connection conn) {
	        try {
	            if (conn != null && !conn.isClosed()) {
	                conn.close();
	            }
	        } catch (SQLException e) {
	            // Log or handle the exception if needed
	        }
	    }

	    private List<Category> fetchCategoriesForProject(Connection conn, Integer projectId) throws SQLException {
	        //@formatter:off
	        String sql = ""
	                + "SELECT c.* FROM " + CATEGORY_TABLE + " c "
	                + "JOIN " + PROJECT_CATEGORY_TABLE + " pc USING (category_id) "
	                + "WHERE project_id = ?";
	        //@formatter:on

	        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
	            setParameter(stmt, 1, projectId, Integer.class);

	            try (ResultSet rs = stmt.executeQuery()) {
	                List<Category> categories = new LinkedList<>();

	                while (rs.next()) {
	                    categories.add(extract(rs, Category.class));
	                }
	                return categories;
	            }
	        }
	    }

	    private List<Step> fetchStepsForProjects(Connection conn, Integer projectsId) throws SQLException {
	        String sql = "SELECT * FROM " + STEP_TABLE + " WHERE project_id = ?";

	        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
	            setParameter(stmt, 1, projectsId, Integer.class);

	            try (ResultSet rs = stmt.executeQuery()) {
	                List<Step> steps = new LinkedList<>();

	                while (rs.next()) {
	                    steps.add(extract(rs, Step.class));
	                }
	                return steps;
	            }
	        }
	    }

	    private List<Material> fetchMaterialsForProjects(Connection conn, Integer projectId) throws SQLException {
	        String sql = "SELECT * FROM " + MATERIAL_TABLE + " WHERE project_id = ?";

	        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
	            setParameter(stmt, 1, projectId, Integer.class);

	            try (ResultSet rs = stmt.executeQuery()) {
	                List<Material> materials = new LinkedList<>();

	                while (rs.next()) {
	                    materials.add(extract(rs, Material.class));
	                }
	                return materials;
	            }
	        }
	    }
		  
}

